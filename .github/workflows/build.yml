name: Build Executable

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile pay_statements_to_excel.py
      env:
        PYINSTALLER_VERBOSITY: 1

    - name: Prepare and Import Certificate
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # Create certificates directory
        mkdir -p certificates

        # Decode the base64 encoded certificate
        echo "${{ secrets.CERT_PFX }}" | base64 -d > certificates/meijer_pay_statements_to_excel.pfx.enc

        # Decrypt the certificate
        openssl enc -d -aes-256-cbc -pbkdf2 -in certificates/meijer_pay_statements_to_excel.pfx.enc -out certificates/meijer_pay_statements_to_excel.pfx -pass pass:${{ secrets.CERT_PASSWORD }}

    - name: Sign the Executable
      if: matrix.os == 'windows-latest'
      run: |
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe" sign /f certificates/meijer_pay_statements_to_excel.pfx /p "${{ secrets.CERT_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 /v dist/pay_statements_to_excel.exe

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: executable-${{ matrix.os }}
        path: dist/

    - name: Cleanup
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        rm -rf certificates
